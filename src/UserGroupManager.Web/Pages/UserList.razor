@using UserGroupManager.Web.Models

@page "/users"
@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager NavManager

<PageTitle>User Management</PageTitle>

<h1>User Management</h1>

@if (users == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Email</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.FirstName</td>
                    <td>@user.LastName</td>
                    <td>@user.Email</td>
                    <td>@user.Status</td>
                    <td>
                        <AuthorizeView Policy="CanManageUsers">
                            <button class="btn btn-sm btn-primary" @onclick="() => EditUser(user)">Edit</button>
                            <button class="btn btn-sm btn-danger" @onclick="() => DeleteUser(user.Id)">Delete</button>
                        </AuthorizeView>
                        <AuthorizeView Policy="CanManageGroups">
                            <button class="btn btn-sm btn-info" @onclick="() => ManageGroups(user.Id)">Manage Groups</button>
                        </AuthorizeView>
                    </td>
                </tr>
            }            
        </tbody>
    </table>
}

@if (editingUser != null)
{
    <div class="modal show" tabindex="-1" style="display: block;" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit User</h5>
                    <button type="button" class="btn-close" @onclick="CancelEdit"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@editingUser" OnValidSubmit="HandleUpdate">
                        <DataAnnotationsValidator />
                        <div class="mb-3">
                            <label class="form-label">First Name</label>
                            <InputText class="form-control" @bind-Value="editingUser.FirstName" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Last Name</label>
                            <InputText class="form-control" @bind-Value="editingUser.LastName" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Email</label>
                            <InputText class="form-control" @bind-Value="editingUser.Email" />
                        </div>
                        <button type="submit" class="btn btn-success">Save Changes</button>
                        <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}


@code {
    private UserDTO[]? users;

    private UserDTO? editingUser;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            users = await Http.GetFromJsonAsync<UserDTO[]>("api/users");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching users: {ex.Message}");
        }
    }

    //Edit modal
    private void EditUser(UserDTO userToEdit)
    {
        editingUser = new UserDTO
        {
            Id = userToEdit.Id,
            FirstName = userToEdit.FirstName,
            LastName = userToEdit.LastName,
            Email = userToEdit.Email
        };
    }

    private void CancelEdit()
    {
        editingUser = null;
    }

    private async Task HandleUpdate()
    {
        if (editingUser == null) return;

        var response = await Http.PutAsJsonAsync($"api/users/{editingUser.Id}", editingUser);

        if (response.IsSuccessStatusCode)
        {
            editingUser = null;
            users = await Http.GetFromJsonAsync<UserDTO[]>("api/users");
        }
        else
        {
            Console.WriteLine("Error updating user.");
        }
    }

    private async Task DeleteUser(int userId)
    {
        var response = await Http.DeleteAsync($"api/users/{userId}");
        if (response.IsSuccessStatusCode)
        {
            users = await Http.GetFromJsonAsync<UserDTO[]>("api/users");
        }
        else
        {
            Console.WriteLine("Error deleting user.");
        }
    }

    private void ManageGroups(int userId)
    {
        NavManager.NavigateTo($"/admin/users/{userId}/groups");
    }
}