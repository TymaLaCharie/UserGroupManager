@using UserGroupManager.Web.Models;
@page "/admin/groups"
@attribute [Authorize(Policy = "CanManageGroups")]
@inject HttpClient Http
@inject NavigationManager NavManager

<PageTitle>Manage Groups</PageTitle>

<h3>Manage Groups</h3>

<div class="card mb-3">
    <div class="card-header">Create New Group</div>
    <div class="card-body">
        <EditForm Model="@newGroup" OnValidSubmit="CreateGroup">
            <DataAnnotationsValidator />
            <div class="input-group">
                <InputText @bind-Value="newGroup.Name" class="form-control" placeholder="New group name" />
                <button type="submit" class="btn btn-success">Create</button>
            </div>
            <ValidationMessage For="@(() => newGroup.Name)" />
        </EditForm>
    </div>
</div>

@if (allGroups == null)
{
    <p><em>Loading groups...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Group Name</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var group in allGroups)
            {
                <tr>
                    <td>@group.Name</td>
                    <td>
                        <button class="btn btn-sm btn-primary" @onclick="() => EditGroupPermissions(group.Id)">Manage Permissions</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteGroup(group.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<!-- Edit Modal (only shows when editing a group) -->
@if (editingGroup != null)
{
    <div class="modal show" tabindex="-1" style="display: block;" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Group</h5>
                    <button type="button" class="btn-close" @onclick="CancelEdit"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@editingGroup" OnValidSubmit="UpdateGroup">
                        <DataAnnotationsValidator />
                        <div class="mb-3">
                            <label class="form-label">Group Name</label>
                            <InputText class="form-control" @bind-Value="editingGroup.Name" />
                            <ValidationMessage For="@(() => editingGroup.Name)" />
                        </div>
                        <button type="submit" class="btn btn-success">Save Changes</button>
                        <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<GroupDTO>? allGroups;
    private UpdateGroupDTO newGroup = new();
    private UpdateGroupDTO? editingGroup;
    private int editingGroupId;

    protected override async Task OnInitializedAsync()
    {
        await LoadGroups();
    }

    private async Task LoadGroups()
    {
        allGroups = await Http.GetFromJsonAsync<List<GroupDTO>>("api/admin/groups");
    }

    private async Task CreateGroup()
    {
        var response = await Http.PostAsJsonAsync("api/admin/groups", newGroup);
        if (response.IsSuccessStatusCode)
        {
            newGroup.Name = string.Empty;
            await LoadGroups();
        }
    }

    private void EditGroupPermissions(int groupId)
    {
        NavManager.NavigateTo($"/admin/groups/{groupId}/permissions");
    }

    private void BeginEdit(GroupDTO groupToEdit)
    {
        editingGroupId = groupToEdit.Id;
        editingGroup = new UpdateGroupDTO { Name = groupToEdit.Name };
    }

    private void CancelEdit()
    {
        editingGroup = null;
    }

    private async Task UpdateGroup()
    {
        if (editingGroup == null) return;
        var response = await Http.PutAsJsonAsync($"api/admin/groups/{editingGroupId}", editingGroup);
        if (response.IsSuccessStatusCode)
        {
            editingGroup = null;
            await LoadGroups();
        }
    }

    private async Task DeleteGroup(int groupId)
    {
        var response = await Http.DeleteAsync($"api/admin/groups/{groupId}");
        if (response.IsSuccessStatusCode)
        {
            await LoadGroups();
        }
    }
}