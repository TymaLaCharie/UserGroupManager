@page "/stats"
@attribute [Authorize]
@inject HttpClient Http
@using UserGroupManager.Web.Models

<PageTitle>Dashboard</PageTitle>

<h1>Dashboard</h1>

@if (userCount == null || groupStats == null)
{
    <p><em>Loading stats...</em></p>
}
else
{
    <div class="dashboard-grid">
        <div class="dashboard-card bg-purple">
            <div class="card-title-custom">Total Users</div>
            <div class="card-metric">@userCount.Count</div>
        </div>

        @foreach (var (stat, index) in groupStats.Select((item, index) => (item, index)))
        {
            var colorClass = GetColorClass(index);
            <div class="dashboard-card @colorClass">
                <div class="card-title-custom">Users in @stat.GroupName</div>
                <div class="card-metric">@stat.UserCount</div>
            </div>
        }
    </div>
}

@code {
    private TotalUserCountDTO? userCount;
    private List<GroupUserCountDTO>? groupStats;

    private string[] colorClasses = { "bg-pink", "bg-yellow", "bg-teal", "bg-blue" };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            userCount = await Http.GetFromJsonAsync<TotalUserCountDTO>("api/stats/user-count");
            groupStats = await Http.GetFromJsonAsync<List<GroupUserCountDTO>>("api/stats/users-per-group");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching stats: {ex.Message}");
        }
    }

    private string GetColorClass(int index)
    {
        return colorClasses[index % colorClasses.Length];
    }
}